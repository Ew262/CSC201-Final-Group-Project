enum orientation = {horizontal, vertical};

struct PositionType {
	int row;
	int col;
};

struct ShipType {
	char[5] carrier; // vertical
	char[4] battleship; // horizontal
	char[3] cruiser; // vertical
	char[3] submarine; // horizontal
	char[2] destroyer; // vertical
};

const int MAX_SIZE = 8;

struct GameType {
	char gameArry[MAX_SIZE][MAX_SIZE];
	char shipLocations[MAX_SIZE][MAX_SIZE];
	ShipType ship;
	PositionType position;
};

// creates and returns a random number when called
// Pre: none
// Post: returns a random number
int RandNumGen()

// prints rules to screen
// Pre: none
// Post: prints game rules to screen
void PrintRules()

// prints updated battleship to screen
// Pre: valid const int array
// Post: returns formatted 
void PrintBattlefield(/* IN */ const int array[])

// prompts user and interperests guesses 
void PromptGuesses()

// interperets guesses 
// Pre: two valids
// Post: returns wether a ship is hit or missed
bool InterpretGuesses(/* INOUT */ int& array[], GameType &shipLocations, int, int)

// for making sure ships don't overlap
void CollisonCheck
 
void InitBattlefield(/* INOUT */ int& array[], int, int, bool)


int main() {
	GameType gameArry[][];
	
	PrintRules()
	InitBattle();
	
	// while loop
		PrintBattleField();
		PromptGuesses();
		InterpretGuesses();
	// while all ships are not hits and while user is still wants to play
}
