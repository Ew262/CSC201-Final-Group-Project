enum orientation = {horizontal, vertical};

struct PositionType {
	int row;
	int col;
};

struct ShipType {
	char[5] carrier; // vertical
	char[4] battleship; // horizontal
	char[3] cruiser; // vertical
	char[3] submarine; // horizontal
	char[2] destroyer; // vertical
};

const int MAX_SIZE = 8;

struct GameType {
	char gridArray[MAX_SIZE][MAX_SIZE];
	char shipLocations[MAX_SIZE][MAX_SIZE];
	ShipType ship;
	PositionType position;
};

// creates and returns a random number when called
// Pre: none
// Post: returns a random number
int RandNumGen()

// prints rules to screen
// Pre: none
// Post: prints game rules to screen
void PrintRules()

// Initializes battlefield
// Pre: valid gridArray GameType
//	valid shipLocations GameType
// Post: returns GameType 2D array
GameType InitBattlefield(/* INOUT */ GameType &gridArray[][MAX_SIZE], GameType &shipLocations[][MAX_SIZE])

// prints updated battleship to screen
// Pre: valid const int array
// Post: returns formatted 
void PrintBattlefield(/* IN */ const int array[])

// prompts user for guess
// Pre: valid x int
//	valid y int
// Post: prompts and returns user input
void PromptGuesses(int &x, int &y);

// interperets guesses 
// Pre: valid gridArray GameType
//      valid shipLocations GameType
//      valid x int
//      valid y int
// Post: returns wether a ship is hit missed
//       and changes board with each input
bool InterpretGuesses(/* INOUT */ const GameType gridArray[][MAX_SIZE], const GameType shipLocations[][MAX_SIZE], int x, int y)

// for making sure ships don't overlap
// Pre:
void CollisonCheck(const GameType shipLocations[][MAX_SIZE])
 
int main() {
	GameType gameArray[][];
	
	PrintRules()
	InitBattle();
	
	// while loop
		PrintBattleField();
		PromptGuesses();
		InterpretGuesses();
	// while all ships are not hits and while user is still wants to play
}
